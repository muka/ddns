// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

// API Service

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Message represents a simple message sent to the Echo service.
type Record struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Record IP address
	Ip string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	// Record Name
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// Record Type see https://github.com/miekg/dns/blob/master/types.go#L27
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// Expiration of the record, after which will be removed.
	// Default is 0 for not expiring
	Expires int32 `protobuf:"varint,5,opt,name=expires,proto3" json:"expires,omitempty"`
	// TTL time to live of the record
	TTL int32 `protobuf:"varint,6,opt,name=TTL,proto3" json:"TTL,omitempty"`
	// Add a PTR (reverse) record
	PTR                  bool     `protobuf:"varint,7,opt,name=PTR,proto3" json:"PTR,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{0}
}

func (m *Record) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Record.Unmarshal(m, b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Record.Marshal(b, m, deterministic)
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return xxx_messageInfo_Record.Size(m)
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Record) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Record) GetDomain() string {
	if m != nil {
		return m.Domain
	}
	return ""
}

func (m *Record) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Record) GetExpires() int32 {
	if m != nil {
		return m.Expires
	}
	return 0
}

func (m *Record) GetTTL() int32 {
	if m != nil {
		return m.TTL
	}
	return 0
}

func (m *Record) GetPTR() bool {
	if m != nil {
		return m.PTR
	}
	return false
}

func init() {
	proto.RegisterType((*Record)(nil), "api.Record")
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor_1b40cafcd4234784) }

var fileDescriptor_1b40cafcd4234784 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x49, 0xbb, 0x76, 0xfa, 0xce, 0x7f, 0x04, 0x94, 0x50, 0x76, 0x28, 0x3d, 0x95, 0x1d,
	0x16, 0xd4, 0x9b, 0xe0, 0x45, 0x7a, 0x1c, 0x22, 0x6d, 0x4f, 0xde, 0xe2, 0xfa, 0x32, 0x02, 0xb3,
	0x09, 0x59, 0x28, 0xca, 0xd8, 0xc5, 0x8f, 0xa0, 0x37, 0xbf, 0x96, 0x5f, 0xc1, 0x0f, 0x22, 0x49,
	0x2b, 0x7a, 0xdb, 0xed, 0xf9, 0xfd, 0x5a, 0x1e, 0xf2, 0xbc, 0x70, 0x2c, 0xb4, 0xe4, 0x42, 0xcb,
	0xb9, 0x36, 0xca, 0x2a, 0x1a, 0x0a, 0x2d, 0x93, 0xe9, 0x4a, 0xa9, 0xd5, 0x1a, 0xb9, 0xff, 0xd4,
	0xb6, 0xca, 0x0a, 0x2b, 0x55, 0xbb, 0xe9, 0x7f, 0xc9, 0xde, 0x09, 0xc4, 0x25, 0x2e, 0x95, 0x69,
	0xe8, 0x09, 0x04, 0xb2, 0x61, 0x24, 0x25, 0xf9, 0x61, 0x19, 0xc8, 0x9e, 0x35, 0x0b, 0x06, 0xd6,
	0xf4, 0x02, 0xe2, 0x46, 0x3d, 0x0b, 0xd9, 0xb2, 0xd0, 0xbb, 0x81, 0x28, 0x85, 0x91, 0x7d, 0xd5,
	0xc8, 0x46, 0xde, 0xfa, 0x4c, 0x19, 0x8c, 0xf1, 0x45, 0x4b, 0x83, 0x1b, 0x16, 0xa5, 0x24, 0x8f,
	0xca, 0x5f, 0xa4, 0x67, 0x10, 0xd6, 0xf5, 0x82, 0xc5, 0xde, 0xba, 0xe8, 0xcc, 0x43, 0x5d, 0xb2,
	0x71, 0x4a, 0xf2, 0x83, 0xd2, 0xc5, 0xab, 0x4f, 0x02, 0x93, 0xa2, 0xb8, 0xaf, 0x2a, 0x34, 0x9d,
	0x5c, 0x22, 0xbd, 0x05, 0xa8, 0x44, 0x87, 0xc3, 0x3b, 0x27, 0x73, 0xb7, 0xb0, 0x87, 0xe4, 0x3f,
	0x64, 0xe7, 0x6f, 0x5f, 0xdf, 0x1f, 0xc1, 0x69, 0x06, 0xbc, 0xbb, 0xe4, 0xc6, 0xbb, 0x1b, 0x32,
	0xa3, 0x0b, 0x38, 0x2a, 0x70, 0x8d, 0x76, 0x7f, 0x41, 0xe6, 0x0b, 0xa6, 0xb3, 0xe4, 0xaf, 0x80,
	0x6f, 0xfb, 0x99, 0x3b, 0xbe, 0x75, 0xcb, 0x76, 0x77, 0xd1, 0xa3, 0x3b, 0xeb, 0x53, 0xec, 0xef,
	0x77, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x4a, 0xe1, 0x99, 0x73, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DDNSServiceClient is the client API for DDNSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DDNSServiceClient interface {
	SaveRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Record, error)
	DeleteRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Record, error)
}

type dDNSServiceClient struct {
	cc *grpc.ClientConn
}

func NewDDNSServiceClient(cc *grpc.ClientConn) DDNSServiceClient {
	return &dDNSServiceClient{cc}
}

func (c *dDNSServiceClient) SaveRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := c.cc.Invoke(ctx, "/api.DDNSService/SaveRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDNSServiceClient) DeleteRecord(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := c.cc.Invoke(ctx, "/api.DDNSService/DeleteRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DDNSServiceServer is the server API for DDNSService service.
type DDNSServiceServer interface {
	SaveRecord(context.Context, *Record) (*Record, error)
	DeleteRecord(context.Context, *Record) (*Record, error)
}

// UnimplementedDDNSServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDDNSServiceServer struct {
}

func (*UnimplementedDDNSServiceServer) SaveRecord(ctx context.Context, req *Record) (*Record, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRecord not implemented")
}
func (*UnimplementedDDNSServiceServer) DeleteRecord(ctx context.Context, req *Record) (*Record, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}

func RegisterDDNSServiceServer(s *grpc.Server, srv DDNSServiceServer) {
	s.RegisterService(&_DDNSService_serviceDesc, srv)
}

func _DDNSService_SaveRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSServiceServer).SaveRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DDNSService/SaveRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSServiceServer).SaveRecord(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDNSService_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDNSServiceServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DDNSService/DeleteRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDNSServiceServer).DeleteRecord(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

var _DDNSService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.DDNSService",
	HandlerType: (*DDNSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveRecord",
			Handler:    _DDNSService_SaveRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _DDNSService_DeleteRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
